import React, {Component} from 'react';
import MUIDataTable from "mui-datatables";
import {createMuiTheme, MuiThemeProvider} from '@material-ui/core/styles';
import {EXPORT_DATA_API, FIELD_TABLE_INDEX, QUERY_FIELD_DICTIONARY_API} from '../Constants.js'
import LoadingOverlay from 'react-loading-overlay';
import Button from '@material-ui/core/Button';
import fileSaver from 'file-saver'
import axios from 'axios'
import PreviewIcon from '@material-ui/icons/RemoveRedEyeRounded';
import orange from '@material-ui/core/colors/orange';
import DownloadIcon from '@material-ui/icons/CloudDownloadRounded';
import Alert from 'react-s-alert';
import 'react-s-alert/dist/s-alert-default.css';
import 'react-s-alert/dist/s-alert-css-effects/flip.css';

class FieldDictionaryContainer extends Component {

    constructor(props) {
        super(props);
        this.isMount = true;
        this.columns = [
            {
                name: "View Detail",
                options: {
                    filter: false,
                    sort: false,
                    empty: true,
                    customBodyRender: (value, tableMeta, updateValue) => {
                        //   console.log("value ",value,' ',tableMeta)
                        const rowData = tableMeta
                        return (

                            <Button variant="contained" color="primary" onClick={() => this.viewFieldDetail(rowData)}>
                                <PreviewIcon/>
                            </Button>

                        );
                    }
                }
            },
            {
                name: "fieldId",
                label: "Field ID",
                options: {
                    filter: true,
                }
            },
            {
                name: "fieldName",
                label: "Field Name",
                options: {
                    filter: true,
                }
            },
            {
                name: "type",
                label: "Type",

                options: {
                    filter: true,
                }
            },
            {
                name: "length",
                label: "Length",

                options: {
                    filter: true,
                }
            },
            {
                name: "decimalPoint",
                label: "Decimal Point",

                options: {
                    filter: true,
                }
            },
            {
                name: "thaiChar",
                label: "Thai Char",

                options: {
                    filter: true,
                }
            },
            {
                name: "description",
                label: "Description",

                options: {
                    filter: true,
                }
            },
            {
                name: "sampleData",
                label: "Sample Data",

                options: {
                    filter: true,
                }
            },
            {
                name: "remarks",
                label: "Remarks",

                options: {
                    filter: true,
                }
            },
            {
                name: "generatedBy",
                label: "Generated By",

                options: {
                    filter: true,
                }
            },
            {
                name: "sendToEDW",
                label: "Send To EDW",

                options: {
                    filter: true,
                }
            },
        ];
        this.state = {
            title: "Field Dictionary",
            data: [],
            column: [],
            row: 25,
            env: this.props.env,
            loading: true
        }
    }


    componentDidUpdate(prevProps) {
        const newProps = this.props
        if (prevProps.env !== newProps.env) {
            console.log("component did update yeah new props ", newProps.env)
            this.setState({
                env: newProps.env,
                loading: true
            }, () => {
                this.queryTable()
            });

        }
    }

    componentWillUnmount() {
        this.isMount = false
    }

    showAlert = (type, message) => {
        if (type === "success") {
            Alert.success(message, {
                position: 'top-right',
                effect: 'flip',
                onShow: function () {
                    console.log('aye!')
                },
                beep: false,
                timeout: 3000,
                offset: 100
            });
        } else if (type === "failed") {
            Alert.error(message, {
                position: 'top-right',
                effect: 'flip',
                onShow: function () {
                    console.log('aye!')
                },
                beep: false,
                timeout: 3000,
                offset: 100
            });
        }
    }
    exportFieldData = () => {
        this.setState({
            loading: true
        })
        axios.post(EXPORT_DATA_API, {"tableType": "field", "env": this.props.env}, {responseType: 'arraybuffer'})
            .then((response) => {
                var blob = new Blob([response.data], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
                fileSaver.saveAs(blob, this.state.title + '.xlsx');
                this.setState({
                    loading: false
                })
                this.showAlert("success", "Successfully Export File")
            });
    }
    viewFieldDetail = (data) => {
        this.props.history.push("/fielddictionary/detail?fieldId=" + data.rowData[1])
    }

    queryTable = () => {

        console.log("change env? ", this.state.env)
        fetch(QUERY_FIELD_DICTIONARY_API + '?env=' + this.state.env, {
            method: "GET",

        })
            .then(response => {
                if (response.status === 200) {
                    return response.json()
                } else {
                    console.log("cannot get data")
                    throw new Error(response.status);
                }
            }).then(data => {
            if (this.isMount) {
                console.log("table type checking ", data.column, ' ', data.data)
                this.setState({
                    data: data.data,
                    loading: false
                })
            }
        }).catch((error) => {
            console.log('error: ' + error);
            this.setState({
                loading: false
            })
        });
    }


    componentDidMount() {
        this.props.highlightTabMenu(FIELD_TABLE_INDEX)
        this.queryTable()
        console.log("please refresh state")

    }


    getMuiTheme = () => createMuiTheme({
        palette: {
            //type: "dark",
            primary: orange
        },

        typography: {
            useNextVariants: true
        },
        overrides: {
            MUIDataTableBodyCell: {
                root: {
                    border: 'solid 1px #C0C0C0',
                    verticalAlign: 'top',
                    //   '&:nth-child': {
                    //      backgroundColor: 'red',

                    //   }
                }
            },
            MUIDataTableSelectCell: {
                checked: {color: "#FF0266 !important"}
            }
            // ,
            // MUIDataTableBodyRow: {
            //   root: {
            //     '&:nth-child(odd)': { 
            //       backgroundColor: '#FF0000'
            //     }
            //   }
            // }
        }
    })

    render() {

        const options = {
            rowsPerPage: this.state.row,
            rowsPerPageOptions: [25, 100, 150, this.state.data.length],
            selectableRows: 'none',
            filterType: 'textField',
            print: false,
            responsive: 'scroll',
            rowHover: true,

            onChangeRowsPerPage: (row) => {
                this.setState({
                    row: row
                })
            },
            // customToolbar: () => {
            //     if(this.props.userRole < 1){
            //         return null
            //     }
            //     else {
            //         return <CustomToolbar handleEdit={this.handleEdit}/>;
            //     }

            //   },

        };

        return (
            <div>
                <LoadingOverlay
                    active={this.state.loading}
                    spinner
                >
                    <Button onClick={this.exportFieldData} variant="contained" size="large" color="primary">
                        <DownloadIcon/>
                    </Button>
                    <br/>
                    <MuiThemeProvider theme={this.getMuiTheme()}>
                        <MUIDataTable
                            title={this.state.title}

                            data={!this.state.data.length === 0 ? []
                                :
                                this.state.data.map(item => {
                                    return [
                                        item.field_id,
                                        item.field_name,
                                        item.type,
                                        item.length,
                                        item.decimal_point,
                                        item.thai_char,
                                        item.description,
                                        item.sample_data,
                                        item.remarks,
                                        item.generated_by,
                                        item.send_to_edw,

                                    ]
                                })
                            }

                            columns={this.columns}
                            options={options}

                        />
                    </MuiThemeProvider>
                </LoadingOverlay>
            </div>

        )
    }
}

export default FieldDictionaryContainer;
