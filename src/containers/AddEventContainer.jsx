import React from 'react';
import Paper from '@material-ui/core/Paper';
import PropTypes from 'prop-types';
import Checkbox from '@material-ui/core/Checkbox';
//import classNames from 'classnames';
import { withStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import Button from '@material-ui/core/Button';
import FormHelperText from '@material-ui/core/FormHelperText';
import { DEV2, DEV3, DEV4, DEV5, ADD_EVENT_INDEX,ADD_EVENT_API, QUERY_FIELDS_IN_EVENT_RELATIONS_API, EDIT_EVENT_API } from '../Constants.js'
import Radio from '@material-ui/core/Radio';
import queryString from 'query-string'
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import LoadingOverlay from 'react-loading-overlay';
import Alert from 'react-s-alert';
import 'react-s-alert/dist/s-alert-default.css';
import 'react-s-alert/dist/s-alert-css-effects/flip.css';

import {
  SortingState,
  IntegratedSorting,
  PagingState,
  IntegratedPaging,
  SearchState,
  IntegratedFiltering,
  FilteringState,
  SelectionState,
  EditingState
} from '@devexpress/dx-react-grid';
import {
  Grid,
  Table,
  TableHeaderRow,
  TableSelection,
  TableEditRow,
  TableEditColumn,
  PagingPanel,
  Toolbar,
  SearchPanel,
  VirtualTable,
  ColumnChooser,
  TableColumnVisibility,
  TableFilterRow,
} from '@devexpress/dx-react-grid-material-ui';
import MenuList from "./AddFieldContainer";

const getRowId = row => row.rowNumber;
const styles = theme => ({
  container: {
    display: 'flex',
    flexWrap: 'wrap',
  },
  card: {
    minWidth: "100%",
  },
  textField: {
    marginLeft: theme.spacing.unit,
    marginRight: theme.spacing.unit,
    width: "50%",
  },
  dense: {
    marginTop: 19,
  },
  margin: {
    margin: theme.spacing.unit,
  }
});

class AddEventContainer extends React.Component {
  constructor(props) {
    super(props);

    this.state = {

      loading: false,
      title: "Add New Field",
      showAlert: false,
      alertType: "",
      alertTitle: "",
      alertMessage: "",
      openDialog: false,
      devTask: "",
      devTaskError: false,
      epicName:"",
      epicNameError:false,
      dev2Checked: false,
      dev3Checked: false,
      dev4Checked: false,
      dev5Checked: false,
      eventCode: "",
      eventCodeError: false,
      subEventCode: "",
      subEventCodeError: false,
      eventNameEN: "",
      eventNameENError: false,
      eventNameTH: "",
      eventNameTHError: false,
      description: "",
      sendToPRM: "Y",
      sendToGL: "Y",
      sendToEDW: "Y",
      profileFlag: "0",
      splunkFlag: "0",
      eventBusFlag: "0",
      eventType: "",
      eventTypeError: false,
      endpoints: "",
      fieldData: [],
      pageSizes: [10, 20, 50, 0],
      eventCodeReadOnly: false,
      subEventCodeReadOnly: false
    };
    this.columns = [
      {
        name: "event_code",
        label: "Event Code",
        options: {
          filter: true,
        }
      },
      {
        name: "sub_event_code",
        label: "Sub Event Code",
        options: {
          filter: true,
        }
      },
      {
        name: "field_name",
        label: "Field",
        options: {
          filter: true,
        }
      },
      {
        name: "mandatory",
        label: "Mandatory",
        options: {
          filter: true,
        }
      },
      {
        name: "generator_value",
        label: "Value",
        options: {
          filter: true,
        }
      },
      {
        name: "generated_by",
        label: "Generated By",
        options: {
          filter: true,
        }
      },
      {
        name: "send_to_edw",
        label: "Send To EDW",
        options: {
          filter: true,
        }
      }
    ]
  }

  componentDidMount() {
    this.isMount = true
    console.log("check username ",this.props.username)
    this.props.highlightTabMenu(ADD_EVENT_INDEX)
    if (this.props.env == DEV2) {
      this.setState({
        dev2Checked: true
      })
    }
    else if (this.props.env == DEV3) {
      this.setState({
        dev3Checked: true
      })
    }
    else if (this.props.env == DEV4) {
      this.setState({
        dev4Checked: true
      })
    }
    else if (this.props.env == DEV5) {
      this.setState({
        dev5Checked: true
      })
    }
    const values = queryString.parse(this.props.location.search)
    if (values.eventCode !== undefined && values.subEventCode !== undefined) {
      this.setState({
        title: "Edit Event",
        eventCodeReadOnly: true,
        subEventCodeReadOnly: true
      })
      this.queryEventRelations()
    }
    else {
      this.setState({
        title: "Add New Event",
        eventCodeReadOnly: false,
        subEventCodeReadOnly: false
      })
    }


  }
  queryEventRelations = () => {
    const values = queryString.parse(this.props.location.search)
    this.setState({
      loading: true
    })
    fetch(QUERY_FIELDS_IN_EVENT_RELATIONS_API + '?env=' + this.props.env + "&eventCode=" + values.eventCode + "&subEventCode=" + values.subEventCode, {
      method: "GET",

    })
      .then(response => {
        if (response.status === 200) {
          return response.json()
        }
        else {
          console.log("cannot get data")
          throw new Error(response.statusText);
        }
      }).then(data => {

        this.setState({
          eventCode: data.eventData[0].event_code,
          subEventCode: data.eventData[0].sub_event_code,
          eventNameEN: data.eventData[0].event_name_en,
          eventNameTH: data.eventData[0].event_name_th,
          description: data.eventData[0].description,
          sendToPRM: data.eventData[0].send_to_prm,
          sendToGL: data.eventData[0].send_to_gl,
          sendToEDW: data.eventData[0].send_to_edw,
          profileFlag:data.eventData[0].profile_flag,
          splunkFlag:data.eventData[0].splunk_flag,
          eventBusFlag:data.eventData[0].event_bus_flag,
          eventType:data.eventData[0].event_type,
          endpoints: data.eventData[0].endpoints,

          fieldData: data.fieldData,
          loading: false
        })
      }).catch((error) => {
        console.log('error: ' + error);
        this.setState({
          loading: false,
          showAlert: true,
          alertType: "error",
          alertTitle: "Error!",
          alertMessage: "Cannot Load Event Detail, Please try again. " + error.message

        })
      });
  }


  handleCheck = (e) => {
    const name = e.target.name;
    const isChecked = e.target.checked;
    console.log("name of check ", name, ' ', isChecked)
    if (name == DEV2) {
      this.setState({
        dev2Checked: isChecked,
      })
    }
    else if (name == DEV3) {

      this.setState({
        dev3Checked: isChecked,

      })
    }
    else if (name == DEV4) {

      this.setState({
        dev4Checked: isChecked,

      })
    }
    else if (name == DEV5) {

      this.setState({
        dev5Checked: isChecked,

      })
    }

  }
  handleChange = name => event => {
    console.log("event target ", event.target.name, ' ', event.target.value)
    this.setState({ [event.target.name]: event.target.value });

  };
  validateInput = () => {
    let validated = true
    if (this.state.eventCode === "" || isNaN(this.state.eventCode)) {
      validated = false
      this.setState({
        eventCodeError: true
      })
    }
    else {
      console.log("entering this else ", this.state.eventCodeError)
      if (this.state.eventCodeError) {

        this.setState({
          eventCodeError: false
        })
      }
    }
    if (this.state.subEventCode === "") {
      validated = false
      this.setState({
        subEventCodeError: true
      })
    }
    else {
      if (this.state.subEventCodeError) {
        this.setState({
          subEventCodeError: false
        })
      }
    }

    if (this.state.eventNameEN === "") {
      validated = false
      this.setState({
        eventNameENError: true
      })
    }
    else {
      if (this.state.eventNameENError) {
        this.setState({
          eventNameENError: false
        })
      }
    }
    if (this.state.eventNameTH === "") {
      validated = false
      this.setState({
        eventNameTHError: true
      })
    }
    else {
      if (this.state.eventNameTHError) {
        this.setState({
          eventNameTHError: false
        })
      }
    }
    if (this.state.sendToPRM === "") {
      validated = false
      this.setState({
        sendToPRMError: true
      })
    }
    else {
      if (this.state.sendToPRMError) {
        this.setState({
          sendToPRMError: false
        })
      }
    }
    if (this.state.sendToGL === "") {
      validated = false
      this.setState({
        sendToGLError: true
      })
    }
    else {
      if (this.state.sendToGLError) {
        this.setState({
          sendToGLError: false
        })
      }
    }
    if (this.state.sendToEDW === "") {
      validated = false
      this.setState({
        sendToEDWError: true
      })
    }
    else {
      if (this.state.sendToEDWError) {
        this.setState({
          sendToEDWError: false
        })
      }
    }
    if (this.state.profileFlag === "") {
      validated = false
      this.setState({
        profileFlagError: true
      })
    }
    else {
      if (this.state.profileFlagError) {
        this.setState({
          profileFlagError: false
        })
      }
    }
    if (this.state.splunkFlag === "") {
      validated = false
      this.setState({
        splunkFlagError: true
      })
    }
    else {
      if (this.state.splunkFlagError) {
        this.setState({
          splunkFlagError: false
        })
      }
    }
    if (this.state.eventBusFlag === "") {
      validated = false
      this.setState({
        eventBusFlagError: true
      })
    }
    else {
      if (this.state.eventBusFlagError) {
        this.setState({
          eventBusFlagError: false
        })
      }
    }
    if (this.state.eventType === "") {
      validated = false
      this.setState({
        eventTypeError: true
      })
    }
    else {
      if (this.state.eventTypeError) {
        this.setState({
          eventTypeError: false
        })
      }
    }

    return validated
  }

  handleClose = () =>{
    this.setState({ 
      openDialog: false,
      epicNameError:false,
      devTaskError:false
    });
  }
  showAlert = (type,message) => {
    if(type === "success"){
        Alert.success(message, {
            position: 'top-right',
            effect: 'flip',
            onShow: function () {
                console.log('aye!')
            },
            beep: false,
            timeout: 10000,
            offset: 100
        });
    }
    else if(type === "failed"){
      Alert.error(message, {
          position: 'top-right',
          effect: 'flip',
          onShow: function () {
              console.log('aye!')
          },
          beep: false,
          timeout: 10000,
          offset: 100
      });
  }
  else if (type === "partial"){
    Alert.warning(message, {
      position: 'top-right',
      effect: 'flip',
      onShow: function () {
          console.log('aye!')
      },
      beep: false,
      timeout: 10000,
      offset: 100
  });
  }
}


  handleSave = () => {
    
    
    var passValidation = this.validateInput()
    if (passValidation) {
      if(!this.state.openDialog){
        this.setState({
          openDialog:true
        })
        return
      }
      let epicNameErrorFlag = false
    let devTaskErrorFlag = false
    if (this.state.epicName === "" || this.state.epicName === " ") {
      epicNameErrorFlag = true

    }
    if (this.state.devTask === "" || this.state.devTask === " ") {
      devTaskErrorFlag = true
    }
    if (epicNameErrorFlag || devTaskErrorFlag) {
      this.setState({
        epicNameError: epicNameErrorFlag,
        devTaskError: devTaskErrorFlag
      })
      return
    }

    this.setState({
      openDialog: false,
      loading: true,
     
    })
      let envList = []

      if (this.state.dev2Checked) {
        envList.push(DEV2)
      }
      if (this.state.dev3Checked) {
        envList.push(DEV3)
      }
      if (this.state.dev4Checked) {
        envList.push(DEV4)
      }
      if (this.state.dev5Checked) {
        envList.push(DEV5)
      }
      const reqObj = {

        "event_code": Number(this.state.eventCode),
        "sub_event_code": this.state.subEventCode,
        "event_name_en": this.state.eventNameEN,
        "event_name_th": this.state.eventNameTH,
        "description": this.state.description,
        "send_to_prm": this.state.sendToPRM,
        "send_to_gl": this.state.sendToGL,
        "send_to_edw": this.state.sendToEDW,
        "profile_flag": this.state.profileFlag,
        "splunk_flag": this.state.splunkFlag,
        "event_bus_flag": this.state.eventBusFlag,
        "event_type": this.state.eventType,
        "endpoints": this.state.endpoints
      }
      const values = queryString.parse(this.props.location.search)
      
      if (values.eventCode !== undefined && values.subEventCode !== undefined) {
        console.log("check username ",this.props.username)
        fetch(EDIT_EVENT_API + "?env=" + this.props.env, {
          method: "PUT",
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            "env": envList,
            "eventObj": reqObj,
            "eventCode": values.eventCode,
            "subEventCode": values.subEventCode,
            "epicName":this.state.epicName,
            "devTask":this.state.devTask,
            "username":this.props.username,
          })
        })
          .then(response => {
            console.log("cannot save update event new response ", response)
            return response.json()
          }).then(data => {
            if (this.isMount) {
              this.setState({
                loading: false,
              })
              this.showAlert(data.status == 200 ? "success" : data.status == 424 ? "failed" : data.status == 207 ? "partial" : "failed" ,data.result)
              
            }
          }).catch((error) => {
            console.log('error: ' + error);
            this.setState({
              loading: false,
          
            })
            this.showAlert("failed" ,error.message)
          });
      }
      else {

        fetch(ADD_EVENT_API + "?env=" + this.props.env, {
          method: "POST",
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            "env": envList,
            "username":this.props.username,
            "epicName":this.state.epicName,
            "devTask":this.state.devTask,
            "eventObj": reqObj,
          })
        })
          .then(response => {
            return response.json()
          }).then(data => {
            console.log("add user json ", data)
            if (this.isMount) {
              this.setState({
                loading: false,
              })

              this.showAlert(data.status == 200 ? "success" : data.status == 424 ? "failed" : data.status == 207 ? "partial" : "failed" ,data.result)
            }
          }).catch((error) => {
            console.log('error: ' + error);
            this.setState({
              loading: false,
            })
            this.showAlert("failed" ,error.message)
          });
      }
    }
    else {
      this.setState({
        loading: false
      })
    }

  }

  render() {
    const { classes } = this.props;

    return (
      <div>
          <Alert stack={false} timeout={3000} />
          <LoadingOverlay
                    active={this.state.loading}
                    spinner
          >
      <Dialog
          open={this.state.openDialog}
          onClose={this.handleClose}
          aria-labelledby="form-dialog-title"
          maxWidth="sm"
          fullWidth={true}
        >
          <DialogTitle id="form-dialog-title">Submit your description to save this Event & Field Relation </DialogTitle>
          <DialogContent>
            <TextField
              autoFocus
              required
              error={this.state.epicNameError}
              margin="dense"
              id="description"
              label="Description"
              name="epicName"
              type="text"
              value={this.state.epicName}
              multiline
              rowsMax="10"
              onChange={this.handleChange('epicName')}
              fullWidth
            />
            {this.state.epicNameError && <FormHelperText>This is required!</FormHelperText>}

          </DialogContent>
          <DialogContent>
            <TextField
              required
              error={this.state.devTaskError}
              margin="dense"
              id="devTask"
              name="devTask"
              label="Dev Task number"
              type="text"

              value={this.state.devTask}
              onChange={this.handleChange('devTask')}
              fullWidth
            />
            {this.state.devTaskError && <FormHelperText>This is required!</FormHelperText>}
          </DialogContent>
          <DialogActions>
            <Button onClick={this.handleClose} color="primary">
              Cancel
            </Button>
            <Button variant="contained" onClick={this.handleSave} color="secondary">
              Save
            </Button>
          </DialogActions>
        </Dialog>

      <form className={classes.container} noValidate autoComplete="off">
        <br />
        <h1>{this.state.title}</h1>
        <br />

        <Card className={classes.card}>

          <CardContent>
            <h3><br />&nbsp; Select environments that you want to apply changes to</h3>
            <label>

              <Checkbox
                name={DEV2}
                checked={this.state.dev2Checked}
                onChange={this.handleCheck}
              />
              <span>{DEV2}</span>
            </label>
            <label>
              <Checkbox
                name={DEV3}
                checked={this.state.dev3Checked}
                onChange={this.handleCheck}
              />
              <span>{DEV3}</span>
            </label>
            <label>
              <Checkbox
                name={DEV4}
                checked={this.state.dev4Checked}
                onChange={this.handleCheck}
              />
              <span>{DEV4}</span>
            </label>
            <label>
              <Checkbox
                name={DEV5}
                checked={this.state.dev5Checked}
                onChange={this.handleCheck}
              />
              <span>{DEV5}</span>
            </label>
            <br />
            <TextField
              required
              error={this.state.eventCodeError}
              id="eventCode"
              InputProps={{
                readOnly:this.state.eventCodeReadOnly
              }}

              name="eventCode"
              label="Event Code"
              variant="outlined"
              className={classes.textField}
              value={this.state.eventCode}
              onChange={this.handleChange('eventCode')}
              margin="normal"
            />
            {this.state.eventCodeError && <FormHelperText>This is required!</FormHelperText>}
            <TextField
              required
              error={this.state.subEventCodeError}
              id="subEventCode"
              InputProps={{
                readOnly:this.state.subEventCodeReadOnly
              }}
              name="subEventCode"
              label="Sub Event Code"
              variant="outlined"
              className={classes.textField}
              value={this.state.subEventCode}
              onChange={this.handleChange('subEventCode')}
              margin="normal"
            />
            {this.state.subEventCodeError && <FormHelperText>This is required!</FormHelperText>}

            <TextField
              required
              error={this.state.eventNameENError}
              id="eventNameEN"
              name="eventNameEN"
              label="Event Name EN"
              variant="outlined"
              className={classes.textField}
              value={this.state.eventNameEN}
              onChange={this.handleChange('eventNameEN')}
              margin="normal"
            />
            {this.state.eventNameENError && <FormHelperText>This is required!</FormHelperText>}

            <TextField
              required
              error={this.state.eventNameTHError}
              id="eventName"
              name="eventNameTH"
              label="Event Name TH"
              variant="outlined"
              className={classes.textField}
              value={this.state.eventNameTH}
              onChange={this.handleChange('eventNameTH')}
              margin="normal"
            />
            {this.state.eventNameTHError && <FormHelperText>This is required!</FormHelperText>}

            <TextField
              id="description"
              name="description"
              label="Description"
              variant="outlined"
              multiline
              rowsMax="10"
              className={classes.textField}
              value={this.state.description}
              onChange={this.handleChange('description')}
              margin="normal"
            />

            <h4>Send To PRM<span style={{ color: "red" }}>&#9;* </span></h4>
            <br />

            <Radio
              checked={this.state.sendToPRM === 'Y'}
              onChange={this.handleChange('sendToPRM')}
              value="Y"
              name="sendToPRM"
              inputProps={{ 'aria-label': 'Send To PRM' }}
            />
            <label>Yes</label>

            <Radio
              checked={this.state.sendToPRM === 'N'}
              onChange={this.handleChange('sendToPRM')}
              value="N"
              name="sendToPRM"
              inputProps={{ 'aria-label': 'Send To PRM' }}
            />
            <label>No</label>

            <br />

            <h4>Send To GL<span style={{ color: "red" }}>&#9;*</span></h4>

            <Radio
              checked={this.state.sendToGL === 'Y'}
              onChange={this.handleChange('sendToGL')}
              value="Y"
              name="sendToGL"
              inputProps={{ 'aria-label': 'Send To GL' }}
            />
            <label>Yes</label>

            <Radio
              checked={this.state.sendToGL === 'N'}
              onChange={this.handleChange('sendToGL')}
              value="N"
              name="sendToGL"
              inputProps={{ 'aria-label': 'Send To GL' }}
            />
            <label>No</label>

            <br />

            <h4>Send To EDW<span style={{ color: "red" }}>&#9;*</span></h4>

            <Radio
              checked={this.state.sendToEDW === 'Y'}
              onChange={this.handleChange('sendToEDW')}
              value="Y"
              name="sendToEDW"
              inputProps={{ 'aria-label': 'Send To EDW' }}
            />
            <label>Yes</label>

            <Radio
              checked={this.state.sendToEDW === 'N'}
              onChange={this.handleChange('sendToEDW')}
              value="N"
              name="sendToEDW"
              inputProps={{ 'aria-label': 'Send To EDW' }}
            />
            <label>No</label>

            <br />

            <h4>Profile Flag<span style={{ color: "red" }}>&#9;*</span></h4>

            <Radio
                checked={this.state.profileFlag === '0'}
                onChange={this.handleChange('profileFlag')}
                value="0"
                name="profileFlag"
                inputProps={{ 'aria-label': 'Profile Flag' }}
            />
            <label>0</label>

            <Radio
                checked={this.state.profileFlag === '1'}
                onChange={this.handleChange('profileFlag')}
                value="1"
                name="profileFlag"
                inputProps={{ 'aria-label': 'Profile Flag' }}
            />
            <label>1</label>

            <br />

            <h4>Splunk Flag<span style={{ color: "red" }}>&#9;*</span></h4>

            <Radio
                checked={this.state.splunkFlag === '0'}
                onChange={this.handleChange('splunkFlag')}
                value="0"
                name="splunkFlag"
                inputProps={{ 'aria-label': 'Splunk Flag' }}
            />
            <label>0</label>

            <Radio
                checked={this.state.splunkFlag === '1'}
                onChange={this.handleChange('splunkFlag')}
                value="1"
                name="splunkFlag"
                inputProps={{ 'aria-label': 'Splunk Flag' }}
            />
            <label>1</label>

            <br />

            <h4>Event Bus Flag<span style={{ color: "red" }}>&#9;*</span></h4>

            <Radio
                checked={this.state.eventBusFlag === '0'}
                onChange={this.handleChange('eventBusFlag')}
                value="0"
                name="eventBusFlag"
                inputProps={{ 'aria-label': 'Event Bus Flag' }}
            />
            <label>0</label>

            <Radio
                checked={this.state.eventBusFlag === '1'}
                onChange={this.handleChange('eventBusFlag')}
                value="1"
                name="eventBusFlag"
                inputProps={{ 'aria-label': 'Event Bus Flag' }}
            />
            <label>1</label>

            <br />
            <TextField
              required
              error={this.state.eventTypeError}
              id="eventType"
              name="eventType"
              label="Event Type"
              variant="outlined"
              className={classes.textField}
              value={this.state.eventType}
              onChange={this.handleChange('eventType')}
              margin="normal"
            />
            {this.state.eventTypeError && <FormHelperText>This is required!</FormHelperText>}
            <br />
            <TextField

              id="endpoints"
              name="endpoints"
              label="Endpoints"
              multiline
              rowsMax="10"
              variant="outlined"
              className={classes.textField}
              value={this.state.endpoints}
              onChange={this.handleChange('endpoints')}
              margin="normal"
            />
          </CardContent>
          {/* {queryString.parse(this.props.location.search).eventCode !== undefined && queryString.parse(this.props.location.search).subEventCode !== undefined?
          <Paper>

                <Grid
                  rows={fieldData}
                  columns={this.columns}
                  getRowId={getRowId}
                >
                  <SearchState />
                  <FilteringState defaultFilters={[]} />
                  <IntegratedFiltering />
                  <PagingState
                    defaultCurrentPage={0}
                    defaultPageSize={25}
                  />
                  <IntegratedPaging />
                  <SortingState

                  />
                    <SortingState
                      defaultSorting={[{ columnName: this.columns[0].name, direction: 'desc' }]}
                    />
                  


                  <IntegratedSorting />
                  <Table />
                  <VirtualTable
                    height="auto"
                  />
                  <TableHeaderRow showSortingControls />


                  <PagingPanel
                    pageSizes={this.state.pageSizes}
                  />
                  <EditingState

                    // onAddedRowsChange={this.changeAddedRows}
                    // onRowChangesChange={this.changeRowChanges}
                    onCommitChanges={this.commitChanges}
                    onEditingRowIdsChange={this.changeEditingRowIds}
                  />

                  <TableEditRow />
                  <TableEditColumn
                    showAddCommand
                    showEditCommand
                    showDeleteCommand
                    // commandComponent={Command}
                  />
                  <Toolbar />
                  <SearchPanel />

                  <TableFilterRow />
                </Grid>

              </Paper>
              :<div/>
                } */}



          <CardActions>
            <Button onClick={this.handleSave} variant="contained" size="large" color="primary" className={classes.margin}>
              Save
        </Button>
          </CardActions>
        </Card>
      </form>
      </LoadingOverlay>
      </div>
    );
  }
}

AddEventContainer.propTypes = {
  classes: PropTypes.object.isRequired,
};

export default withStyles(styles)(AddEventContainer);
